name: cmake

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  Linux:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install gtest manually
      run: sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && sudo cp lib/*.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

    - name: Write files
      env: 
        FILE_ONE: ${{ secrets.KRM_MAIN_FILE }}
        FILE_TWO: ${{ secrets.KRM_SCND_FILE }}
      run: |
        echo "${FILE_ONE}" | base64 --decode > ${HOME}/key.pem |
        echo "${FILE_TWO}" | base64 --decode > ${HOME}/scert.crt

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -VV -C ${{env.BUILD_TYPE}}

    - name: Generate Test Report
      uses: threeal/gcovr-action@latest
      with:
        coveralls-send: true
        github-token: ${{ secrets.GITHUB_TOKEN }}

  Windows:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v3
    - uses: ilammy/setup-nasm@v1
    - uses: ilammy/msvc-dev-cmd@v1

    - name: Write files
      env: 
        FILE_ONE: ${{ secrets.KRM_WIN_MAIN_FILE }}
        FILE_TWO: ${{ secrets.KRM_WIN_SCND_FILE }}
      run: |
        echo "${FILE_ONE}" | openssl base64 -d > ${HOME}/privatekey.key |
        echo "${FILE_TWO}" | openssl base64 -d > ${HOME}/certificate.crt

    - name: Clone openssl
      uses: actions/checkout@v3
      with:
        repository: openssl/openssl
        path: D:/a/cppsocket/cppsocket/openssl
        ref: openssl-3.1.0

    - name: Build and install OpenSSL
      working-directory: D:/a/cppsocket/cppsocket/openssl
      run: |
          perl Configure VC-WIN64A
          nmake
          nmake test
          nmake install

    - name: Find openssl
      run: dir "C:/Program Files/OpenSSL"

    - name: Find openssl
      run: dir "C:/Program Files/OpenSSL/include"

    - name: Find openssl
      run: dir "C:/Program Files/OpenSSL/lib"

    - name: Instal gtest
      uses: MarkusJx/googletest-installer@v1.1.1

    - name: Configure CMake
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

    - name: Build
      # Build your program with the given configuration
      run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -VV -C ${{env.BUILD_TYPE}}

  Linux-clang:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3

    - name: Install gtest manually
      run: sudo apt-get install libgtest-dev && cd /usr/src/gtest && sudo cmake CMakeLists.txt && sudo make && sudo cp lib/*.a /usr/lib && sudo ln -s /usr/lib/libgtest.a /usr/local/lib/libgtest.a && sudo ln -s /usr/lib/libgtest_main.a /usr/local/lib/libgtest_main.a

    - name: Write files
      env: 
        FILE_ONE: ${{ secrets.KRM_MAIN_FILE }}
        FILE_TWO: ${{ secrets.KRM_SCND_FILE }}
      run: |
        echo "${FILE_ONE}" | base64 --decode > ${HOME}/key.pem |
        echo "${FILE_TWO}" | base64 --decode > ${HOME}/scert.crt

    - name: Build and test this project
      run: |
        cmake . -B build -DCMAKE_C_COMPILER=clang -DCMAKE_CXX_COMPILER=clang++
        cmake --build build
        ctest --test-dir build

    - name: Generate a code coverage report
      uses: threeal/gcovr-action@latest
      with:
        gcov-executable: llvm-cov gcov
  