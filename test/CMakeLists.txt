message(STATUS "Building tests")
if(CMAKE_COMPILER_IS_GNUCXX)
    if(CMAKE_BUILD_TYPE STREQUAL "Coverage")
        message(STATUS "Code Coverage")
    
        set(CMAKE_CXX_FLAGS "-g -O0 -fprofile-arcs -ftest-coverage --coverage")
        set(CMAKE_C_FLAGS "-g -O0 -fprofile-arcs -ftest-coverage --coverage")
    elseif(CMAKE_BUILD_TYPE STREQUAL "ASAN")
        message(STATUS "Address sanitization")
        set(CMAKE_CXX_FLAGS "-O3 -Wall -Werror -fsanitize=address -static-libasan")
    elseif(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "debug")
        message(STATUS "Base GCC Debug")
        set(CMAKE_CXX_FLAGS "-g -O0 -Wall -Werror -std=c++20")
    else()
        message(STATUS "Base GCC Release")
        set(CMAKE_CXX_FLAGS "-O3 -Wall -Werror -std=c++20")
    endif()
    find_package(OpenSSL REQUIRED)
    find_package(GTest REQUIRED)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "debug")
        set(CMAKE_CXX_FLAGS "-Wall /MDd /std:c++20")
    elseif(CMAKE_BUILD_TYPE STREQUAL "ASAN")
        message(STATUS "Address sanitization")
        set(CMAKE_CXX_FLAGS "-Wall /MDd /fsanitize=address /std:c++20")
    else()
        set(CMAKE_CXX_FLAGS "-Wall /MD /std:c++20")
    endif()
    if(DEFINED ENV{CI})
        message(STATUS "MSVC Action")
        # github action CI needs
        set(GTEST_LIBRARY "D:/gtest/lib/gtest.lib")
        set(GTEST_INCLUDE_DIR "D:/gtest/include")
        set(GTEST_MAIN_LIBRARY "D:/gtest/lib/gtest_main.lib")
        set(OPENSSL_INCLUDE_DIR "C:/Program Files/OpenSSL/include")
        set(OPENSSL_LIBRARIES "C:/Program Files/OpenSSL/lib")
    else()
        message(STATUS "MSVC Local")
        # this may not be needed or need changing but I needed it
        # this requires setting Windows environment settings for this user with these correct values
        set(GTEST_LIBRARY $ENV{GTEST_LIBRARY})
        set(GTEST_INCLUDE_DIR $ENV{GTEST_INCLUDE_DIR})
        set(GTEST_MAIN_LIBRARY $ENV{GTEST_LIBRARY})
        set(OPENSSL_INCLUDE_DIR $ENV{OPENSSL_INCLUDE_DIR})
        set(OPENSSL_LIBRARIES $ENV{OPENSSL_LIBRARIES})
    endif()
    find_package(OpenSSL REQUIRED)
    find_package(GTest REQUIRED)
elseif(CMAKE_CXX_COMPILER_ID STREQUAL "Clang")
    if(CMAKE_BUILD_TYPE STREQUAL "Debug" OR CMAKE_BUILD_TYPE STREQUAL "debug")
        message(STATUS "CLANG Debug")
        set(CMAKE_CXX_FLAGS "-g -O0 -Wall -Werror")
    else()
        message(STATUS "CLANG Release")
        set(CMAKE_CXX_FLAGS "-O3 -Wall -Werror")
    endif()
    find_package(OpenSSL REQUIRED)
    find_package(GTest REQUIRED)
else()
    message(FATAL_ERROR "Failed to find correct compiler")
endif()

include_directories(../inc)

add_executable(testcppsocket Testcppsocket.cpp)

target_include_directories(testcppsocket PRIVATE ${GTEST_INCLUDE_DIR} ${OPENSSL_INCLUDE_DIR})

target_link_libraries(testcppsocket ${GTEST_LIBRARIES} ${OPENSSL_LIBRARIES})

add_test(
    NAME gtestcppsocket
    COMMAND testcppsocket
)
